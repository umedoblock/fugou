diff -r c7272df275f1 src/par2/par2/galois.c
--- a/src/par2/par2/galois.c	Thu Aug 30 14:25:17 2012 +0900
+++ b/src/par2/par2/galois.c	Wed Sep 05 03:33:22 2012 +0900
@@ -8,12 +8,12 @@
 #include <string.h>
 
 static int
-_calc_log10(int n)
+_calc_log10(long long int n)
 {
     int digits = 0;
 
-    while (n > 0){
-        n /= 10;
+    while (n > 0uLL){
+        n /= 10uLL;
         digits++;
     }
 
@@ -35,13 +35,16 @@
 
 int main(int argc, char *argv[])
 {
-    int i, w, n_bits, n, len;
-    int poly, field_max, digits;
-    int bit_pattern, galois_field, *s;
+    int n_bits, ii;
+    int digits;
+
+    long long int field_max, poly, bit_pattern, galois_field, w, *s, n, i;
+    long long int len_bit_pattern;
+    size_t mem_size, mem_size_hi, mem_size_low, mem_size_i;
 
     fprintf(stderr, "argc = %d\n", argc);
-    for(i=0;i<argc;i++){
-        fprintf(stderr, "argv[%d] = %s\n", i, argv[i]);
+    for(ii=0;ii<argc;ii++){
+        fprintf(stderr, "argv[%d] = %s\n", ii, argv[ii]);
     }
     fprintf(stderr, "\n");
 
@@ -52,45 +55,92 @@
     }
     fprintf(stderr, "n_bits = %d\n", n_bits);
 
-    w = poly = 1 << n_bits;
-    field_max = poly - 1;
+    w = poly = 1uLL << n_bits;
+    field_max = poly - 1uLL;
     digits = _calc_log10(poly);
+    mem_size = sizeof(long long int) * w;
+    mem_size_ = sizeof(long long int) * w;
+    if (mem_size == 0uLL) {
+        fprintf(stderr, "mem_size is zero.\n");
+        fprintf(stderr, "mem_size 3 = %u.\n", mem_size);
+        fprintf(stderr, "mem_size 4 = %lld.\n", mem_size);
+        fprintf(stderr, "poly = %lld.\n", poly);
+        fprintf(stderr, "w = %lld.\n", w);
+        fprintf(stderr, "w << 3 = %lld.\n", w << 3);
+        fprintf(stderr, "w * 1 = %lld.\n", w * 1);
+        fprintf(stderr, "w * 2 = %lld.\n", w * 2);
+        fprintf(stderr, "w * 4 = %lld.\n", w * 4);
+        fprintf(stderr, "w * 8 = %lld.\n", w * 8);
+        fprintf(stderr, "w * sizeof(long long int) = %lld.\n", \
+                         w * sizeof(long long int));
+        fprintf(stderr, "sizeof(long long int) = %d.\n", \
+                         sizeof(long long int));
+        mem_size = 34359738368uLL;
+        fprintf(stderr, "mem_size = %u.\n", mem_size);
+        fprintf(stderr, "mem_size = %lld.\n", mem_size);
+        exit(-1);
+    }
     /*
-    fprintf(stderr, "w = %d\n", w);
+    */
+    fprintf(stderr, "w = %lld\n", w);
     fprintf(stderr, "digits = %d\n", digits);
-    fprintf(stderr, "field_max = %d\n", field_max);
-    fprintf(stderr, "poly = %d\n", poly);
-    */
+    fprintf(stderr, "field_max = %lld\n", field_max);
+    fprintf(stderr, "poly = %lld\n", poly);
+    fprintf(stderr, "mem_size = %u\n", mem_size);
+
+    s = (long long int *)malloc(mem_size);
+    fprintf(stderr, "s address is %p\n", s);
+    fprintf(stderr, "\n");
+
     fprintf(stderr, "galois_field =\n");
-
-    s = (int *)malloc(sizeof(int) * w);
-    for (i=1;i<poly;i+=2){
+    for (i=1uLL;i<poly;i+=2uLL){
         galois_field = i;
         galois_field += poly;
         /*
-        fprintf(stderr, "galois_field = %d\n", galois_field);
         */
-        memset(s, '\0', sizeof(int) * w);
+        fprintf(stderr, "galois_field = %lld\n", galois_field);
+        fprintf(stderr, "poly = %lld\n", poly);
+        fprintf(stderr, "i = %lld\n", i);
+        fprintf(stderr, "memset(%p, \'\\0\', mem_size=%u)\n", s, mem_size);
+        if (mem_size <= 0xffffffff) {
+            memset(s, '\0', mem_size);
+        }
+        else {
+            fprintf(stderr, "mem_size <= 0xffffffff\n");
+            mem_size_hi = mem_size >> 31uLL;
+            mem_size_low = mem_size & 0x7fffffff;
+            for (mem_size_i=0uLL;mem_size_i<mem_size_hi;mem_size_i++)
+                memset(s + mem_size_i * (1 << 31), '\0', 1 << 31);
+            if (mem_size_low)
+                memset(s + mem_size_i * (1 << 31), '\0', mem_size_low);
+        }
+        /*
+        bzero(s, mem_size);
+        */
 
-        len = 0;
-        bit_pattern = 1;
-        for (n=0;n<field_max;n++){
+        len_bit_pattern = 0uLL;
+        bit_pattern = 1uLL;
+        for (n=0uLL;n<field_max;n++){
+            fprintf(stderr, "n < field_max = %d\n", n < bit_pattern);
+            fprintf(stderr, "n = %lld, bit_pattern = %lld\n", n, bit_pattern);
             /*
-            fprintf(stderr, "n = %d, bit_pattern = %d\n", n, bit_pattern);
             */
+            fprintf(stderr, "bit_pattern 1= %lld\n", bit_pattern);
             if (s[bit_pattern])
                 break;
-            len++;
-            s[bit_pattern] = 1;
-            bit_pattern <<= 1;
+            len_bit_pattern++;
+            s[bit_pattern] = 1uLL;
+            bit_pattern <<= 1uLL;
             if (bit_pattern & poly)
                 bit_pattern ^= galois_field;
+            fprintf(stderr, "bit_pattern 2= %lld\n", bit_pattern);
         }
-        if (len == field_max) {
-            fprintf(stderr, "%d, 0b", galois_field);
+        if (len_bit_pattern == field_max) {
+            fprintf(stderr, "%lld, 0b", galois_field);
             p_bit(stderr, galois_field, n_bits + 1);
             fprintf(stderr, "\n");
         }
+        fprintf(stderr, "\n");
     }
 /*
 for galois_field in range(1, poly):
